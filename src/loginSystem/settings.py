"""
Django settings for loginSystem project.

Generated by 'django-admin startproject' using Django 4.0.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
from pathlib import Path
import os
from dotenv import load_dotenv
import sqlite3
from django.conf import settings
from ipware import get_client_ip 
from datetime import timedelta


# Load environment variables from .env file
load_dotenv()



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-19^oce$ux*mg1yjnoa1ntdx$_=kg#a_3^o4wkj*-2kwnv_rzku'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1', 'localhost',]


# Application definition

INSTALLED_APPS = [
    #Django apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',


    #my apps
    'logIn',
    'sslserver',

    
    'django_password_validators',
    'django_password_validators.password_history',
    'django_recaptcha',
    'captcha',
    'django_extensions',
    
    'axes',
    'django_otp',
    'django_otp.plugins.otp_totp',  # TOTP-based OTPs (Google Authenticator) support
    'django_otp.plugins.otp_static',  # Static backup tokens
    'two_factor',
    'two_factor.plugins.email',  

]

# Google reCAPTCHA Settings
RECAPTCHA_PUBLIC_KEY = '6LcMq_QqAAAAAJ9dVrS7ZZ0iGnPUrxqcOusPufqw'
RECAPTCHA_PRIVATE_KEY = '6LcMq_QqAAAAAIFJ1dFt84qMZAC__SYUzAagJO91'
#RECAPTCHA_SECRET_KEY = '6LcMq_QqAAAAAIFJ1dFt84qMZAC__SYUzAagJO91'

# Optional configuration for reCAPTCHA
RECAPTCHA_REQUIRED_SCORE = 0.85  # Adjustable
RECAPTCHA_USE_SSL = True



MIDDLEWARE = [
    
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'axes.middleware.AxesMiddleware',
    'django_otp.middleware.OTPMiddleware',
    
]

AUTHENTICATION_BACKENDS = [
    'axes.backends.AxesBackend',  # Axes backend
    'django.contrib.auth.backends.ModelBackend', # Default backend
]

ROOT_URLCONF = 'loginSystem.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')], 
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'loginSystem.wsgi.application'

LOGIN_URL = '/login/'  #users will be redirected here when they try to access a view that requires authentication but are not logged in.
LOGIN_REDIRECT_URL = '/'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',  # This is for SQLite
        'NAME': BASE_DIR / 'db.sqlite3',  # Path to your database file
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators


#Password Strength Enforcement
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {'min_length': 8,}
   
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
     {
        'NAME': 'django_password_validators.password_history.password_validation.UniquePasswordsValidator',
        'OPTIONS': {
            'last_passwords': 5 # Only the last 5 passwords entered by the user
        }
    },
     {
        'NAME': 'django_password_validators.password_character_requirements.password_validation.PasswordCharacterValidator',
        'OPTIONS': {
             'min_length_digit': 1,
             'min_length_special': 1,
             'min_length_lower': 1,
             'min_length_upper': 1,
             'special_characters': "~!@#$%^&*()_+:;'[]"
         }
    },
]


# HCAPTCHA
#HCAPTCHA_SITE_KEY ='f39804f0-4522-4bda-afac-20de0e6e07d8'
#HCAPTCHA_SECRET_KEY ='ES_11572a6861af4e8ea043372e9207f4c7'



# Two-Factor Authentication
TWO_FACTOR_REQUIRED = True  # Enforce 2FA on login
TWO_FACTOR_REQUIRED_EXEMPT_URLS = ['/admin/']
# Two-Factor Authentication (OTP settings)
OTP_TOTP_ISSUER = 'loginSystem'
OTP_TOTP_DIGITS = 6  # Number of digits in the OTP


#EMAIL
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 465
EMAIL_USE_SSL = True
EMAIL_USE_TLS = False
EMAIL_HOST_USER = 'djangoapp2025@gmail.com'
EMAIL_HOST_PASSWORD = 'ajiz xobo pvcw hoym' #App password
DEFAULT_FROM_EMAIL = 'djangoapp2025@gmail.com'

# No selected code was provided, so I will generate a code snippet that can be inserted at the cursor position.

# This is a sample code snippet that can be used to improve the existing code.
# It includes a function to check if a user's password has expired and needs to be changed.


#Customize Logging in
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'axes.log', 
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True,
        },
        'axes': {  # Logs failed login attempts and lockouts
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}



# To add more security especially when running on https (put 'false' if running on http)
SECURE_SSL_REDIRECT = False  # Redirect HTTP to HTTPS
SESSION_COOKIE_SECURE = True  # Ensure cookies are only sent over HTTPS
CSRF_COOKIE_SECURE = True  # Ensure CSRF cookie is only sent over HTTPS

#To add security headers to prevent vulnerabilities
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True


# Keeps updating the expiry time with every request
# Set session to expire after inactivity
SESSION_COOKIE_AGE = 1500  # 25 minutes (1500 seconds)

SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # Session expires when the browser closes

SESSION_SAVE_EVERY_REQUEST = True # Refresh expiry time on each request

PASSWORD_EXPIRE_DAYS = 90  # Password expires after 90 days

PASSWORD_EXPIRE_FORCE = True #to force password change

PASSWORD_EXPIRE_EXCLUDE_SUPERUSERS = True #to exclude superusers from the password expiration

#Session Security To prevent session hijacking
SESSION_ENGINE = 'django.contrib.sessions.backends.signed_cookies'

# Django-Axes settings (Account Activity Monitoring and Alerts)
AXES_FAILURE_LIMIT = 3  # Lock after 3 attempts

AXES_COOLOFF_TIME = timedelta(minutes=10) # Lock for 10 minutes

AXES_ENABLED = True  # Ensure Axes is active

AXES_LOCKOUT_CALLABLE = 'logIn.utils.custom_lockout_callable'

AXES_LOCKOUT_PARAMETERS = ['ip_address','username'] #Tracks both ip address and username

AXES_RESET_ON_SUCCESS = True #Resets counter after successful login

AXES_ENABLE_ADMIN = False  # Enable Axes in Django admin panel

AXES_LOCKOUT_TEMPLATE = "logIn/lockout.html"  # Custom lockout page 

AXES_USE_IP_ADDRESS = True #To block attackers trying multiple usernames from the same IP.

AXES_ALLOWED_CIDR_RANGES = [] #To exclude IP(s) from Axes restrictions '192.168.1.0/24'.









#MFA
#ACCOUNT_EMAIL_VERIFICATION = "mandatory"
#ACCOUNT_AUTHENTICATION_METHOD = "email"
#ACCOUNT_EMAIL_REQUIRED = True



# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/


STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')



# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


